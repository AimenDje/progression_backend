image: docker:latest
#image: $CI_REGISTRY/progression/dev:latest 

# Select what we should cache
cache:
  paths:
  - progression/vendor

stages:
  - setup
  - test
  - build_image
  - deploy_image
  - build_doc_master
  - build_doc_dev
  - deploy_doc

variables:
  PROGRESSION_DIR: $CI_PROJECT_DIR
  DOCKER_HOST: "tcp://dind:2375"
  
.creation_bd: &creation_bd
  before_script:
  - docker network create tu-net
  - docker run --name mariadb --net=tu-net -d -e MYSQL_ROOT_PASSWORD=password mariadb
  - cp $PROGRESSION_DIR/progression/app/.env.exemple $PROGRESSION_DIR/progression/tests/.env
  - source $PROGRESSION_DIR/progression/tests/.env
  # Attend au maximum 15 secondes que la BD soit accessible
  - for i in $(seq 15); do if echo "select 1;" | docker exec -i mariadb mysql -uroot -ppassword; then break; fi; sleep 1; done
  # Création de la BD
  - echo "DROP DATABASE IF EXISTS $DB_DBNAME;" | docker exec -i mariadb mysql -uroot -ppassword
  - echo "CREATE USER IF NOT EXISTS $DB_USERNAME@'%' IDENTIFIED BY \"$DB_PASSWORD\";" | docker exec -i mariadb mysql -uroot -ppassword
  - echo "CREATE DATABASE $DB_DBNAME CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;" | docker exec -i mariadb mysql -uroot -ppassword 
  - echo "GRANT ALL PRIVILEGES ON $DB_DBNAME.* TO $DB_USERNAME@'%';" | docker exec -i mariadb mysql -uroot -ppassword
  - docker exec -i mariadb mysql -uroot -ppassword $DB_DBNAME < $PROGRESSION_DIR/db/create_db.sql
  - docker exec -i mariadb mysql --default-character-set=utf8 -u$DB_USERNAME -p$DB_PASSWORD $DB_DBNAME < $PROGRESSION_DIR/progression/tests/données_de_test.sql


# Stage setup

# Mise en place
installation:
  stage: setup
  services:
  - name: git.dti.crosemont.quebec:5050/progression/dind_workaround:latest
    command: ["--tls=false"]
    alias: dind
  script:
  # Installation des dépendances PHP
  - docker run -v "$PROGRESSION_DIR/progression/:/tmp/progression/" $CI_REGISTRY/progression/dev:latest php /composer.phar install -d /tmp/progression


# Stage test

# Tests unitaires
test_unitaires:
  stage: test
  needs: [installation]
  services:
  - name: git.dti.crosemont.quebec:5050/progression/dind_workaround:latest
    command: ["--tls=false"]
    alias: dind
  <<: *creation_bd
  script:
  - cp $PROGRESSION_DIR/progression/app/.env.exemple $PROGRESSION_DIR/progression/tests/.env
  - source $PROGRESSION_DIR/progression/tests/.env
  # Tests unitaires
  - docker run --net=tu-net --env-file=$PROGRESSION_DIR/progression/tests/.env -v "$PROGRESSION_DIR/progression/:/tmp/progression/" -e DB_SERVERNAME=mariadb $CI_REGISTRY/progression/dev:latest /tmp/progression/vendor/bin/phpunit --configuration /tmp/progression/phpunit.xml --coverage-text
  # Analyse statique
  - docker run -v "$PROGRESSION_DIR/progression/:/tmp/progression/" $CI_REGISTRY/progression/dev:latest php -d memory_limit=1G /tmp/progression/vendor/bin/phpstan analyse -c /tmp/progression/phpstan.neon
  # Linter Prettier
  - echo "apk update && apk add bash npm && npm install --global prettier @prettier/plugin-php && bash -c 'shopt -s globstar && prettier --use-tabs --print-width 120 --php-version "7.4" -c /tmp/progression/tests/**/*.php /tmp/progression/app/**/*.php'" | docker run -i -v "$PROGRESSION_DIR/progression/:/tmp/progression/" alpine:latest sh

# Stage build_image

# Construction de l'image
const_image:
  stage: build_image
  services:
  - name: git.dti.crosemont.quebec:5050/progression/dind_workaround:latest
    command: ["--tls=false"]
    alias: dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/progression/progression_backend:$CI_COMMIT_REF_NAME progression
    - docker push $CI_REGISTRY/progression/progression_backend:$CI_COMMIT_REF_NAME
  only:
    - dev
    - master


# Stage deploy_image

# Déploiement sur /staging
deploy_master:
  stage: deploy_image
  needs: [const_image]
  script:
    - chmod 400 /builds/progression/progression_backend.tmp/ID_RSA
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $CD_USER@$CD_HOST -p $CD_PORT $CD_COMMAND
  only:
    - master

# Déploiement sur /dev
deploy_dev:
  stage: deploy_image
  needs: [const_image]
  script:
    - chmod 400 /builds/progression/progression_backend.tmp/ID_RSA
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $CD_USER@$CD_HOST -p $CD_PORT $CD_COMMAND_DEV
  only:
    - dev


# Stage build_doc

# Production de la documentation master
pages_master:
  stage: build_doc_master
  services:
  - name: git.dti.crosemont.quebec:5050/progression/dind_workaround:latest
    command: ["--tls=false"]
    alias: dind
  variables:
    PROGRESSION_API_URL: https://progression.dti.crosemont.quebec/staging/api/v1
  script:
  - docker run -e PROGRESSION_API_URL=$PROGRESSION_API_URL -v "$PROGRESSION_DIR/:/tmp/" $CI_REGISTRY/progression/publication:latest emacs --batch --load ~/.emacs.el --load /tmp/doc/publish.el --funcall org-publish-all
  - mkdir public && cp -r $PROGRESSION_DIR/progression/app/html/doc/* public/
  - "! grep -c nil public/api.html # Vérifie que la production de l'API n'a pas produit d'erreur"
  only:
    - dev
    - master
  artifacts:
    paths:
    - public

# Production de la documentation dev
pages_dev:
  stage: build_doc_dev
  services:
  - name: git.dti.crosemont.quebec:5050/progression/dind_workaround:latest
    command: ["--tls=false"]
    alias: dind
  variables:
    PROGRESSION_API_URL: https://progression.dti.crosemont.quebec/dev/api/v1
  script:
  - docker run -e PROGRESSION_API_URL=$PROGRESSION_API_URL -v "$PROGRESSION_DIR/:/tmp/" $CI_REGISTRY/progression/publication:latest emacs --batch --load ~/.emacs.el --load /tmp/doc/publish.el --funcall org-publish-all
  - mkdir -p public/dev && cp -r $PROGRESSION_DIR/progression/app/html/doc/* public/dev/
  - "! grep -c nil public/dev/api.html # Vérifie que la production de l'API n'a pas produit d'erreur"
  only:
    - dev
  artifacts:
    paths:
    - public


# Stage deploy_doc

# Déploiement de la doc
pages:
  stage: deploy_doc
  script:
    - echo OK #apparemment nécessaire...
  artifacts:
    paths:
    - public
  only:
    - dev
    - master
