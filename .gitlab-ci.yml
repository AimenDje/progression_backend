image: docker/compose:latest

services:
  - docker:19.03.1-dind

# Select what we should cache
cache:
  paths:
  - progression/vendor

stages:
  - build_image
  - test
  - deploy_image
  - build_doc_master
  - build_doc_dev
  - deploy_doc

variables:
  PROGRESSION_DIR: $CI_PROJECT_DIR
  DOCKER_TLS_CERTDIR: ""

.creation_bd: &creation_bd
  before_script:
  - docker network create tu-net
  - docker run --name mariadb --net=tu-net -d -e MYSQL_ROOT_PASSWORD=password -v "$PROGRESSION_DIR/progression/db/:/initdb/" mariadb
  - cp $PROGRESSION_DIR/progression/app/.env.exemple $PROGRESSION_DIR/progression/tests/.env
  - source $PROGRESSION_DIR/progression/tests/.env
  # Attend au maximum 15 secondes que la BD soit accessible
  - for i in $(seq 15); do if echo "select 1;" | docker exec -i mariadb mysql -uroot -ppassword; then break; fi; sleep 1; done

# Stage test

# Tests unitaires
test_unitaires:
  stage: test
  environment: tests
  script:
    - docker-compose run -v $PROGRESSION_DIR/progression/app:/var/www/progression/app -v $PROGRESSION_DIR/progression/tests:/var/www/progression/tests -v $PROGRESSION_DIR/progression/phpstan.neon:/var/www/progression/phpstan.neon -v $PROGRESSION_DIR/progression/phpunit.xml:/var/www/progression/phpunit.xml tests 
      
# Linter
linter:
  stage: test
  environment: tests
  script:
    - docker-compose run -v $PROGRESSION_DIR/progression/app:/var/www/progression/app -v $PROGRESSION_DIR/progression/tests:/var/www/progression/tests lint



# Stage build_image

# Construction de l'image
const_image:
  stage: build_image
  script:
    - sleep 3 && docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/progression/progression_backend:test progression
    - docker push $CI_REGISTRY/progression/progression_backend:test
  only:
    - master
    - dev


# Stage deploy_image

.preparer_contexte: &preparer_contexte
    - apk add ca-certificates
    - mkdir ~/.ssh && cp $ID_RSA ~/.ssh/id_rsa
    - docker context create --docker host=ssh://$CD_USER@$CD_HOST:$CD_PORT --description="Production" prod
    - docker context use prod

.login: &login
    - DOCKER_HOST= 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY


# Déploiement sur /dev
deploy_dev:
  stage: deploy_image
  needs: [const_image]
  environment:
    name: dev
    url: https://progression.dti.crosemont.quebec/dev/
  before_script:
    << *preparer_contexte
  script:
    << *login
    - docker-compose -p $ up -d progression
  only:
    - dev

# Déploiement sur /demo
deploy_demo:
  stage: deploy_image
  needs: [const_image]
  environment:
    name: demo
    url: https://progression.dti.crosemont.quebec/demo/
  before_script:
    << *preparer_contexte
  script:
    << *login
    - docker-compose -p demo up -d progression
  only:
    - master

# Déploiement sur /pilote
deploy_pilote:
  stage: deploy_image
  needs: [const_image]
  environment:
    name: pilote
    url: https://progression.dti.crosemont.quebec/pilote/
  before_script:
    << *preparer_contexte
  script:
    << *login
    - docker-compose -p pilote up -d progression
  only:
    - master

# Déploiement sur /staging
deploy_staging:
  stage: deploy_image
  needs: [const_image]
  environment:
    name: staging
    url: https://progression.dti.crosemont.quebec/staging/
  before_script:
    << *preparer_contexte
  script:
    << *login
    - docker-compose -p staging up -d progression
  only:
    - master

# Stage build_doc

# Production de la documentation master
pages_master:
  stage: build_doc_master
  variables:
    PROGRESSION_API_URL: https://progression.dti.crosemont.quebec/staging/api/v1
  script:
  - docker run -e PROGRESSION_API_URL=$PROGRESSION_API_URL -v "$PROGRESSION_DIR/:/tmp/" $CI_REGISTRY/progression/dev:latest emacs --batch --load ~/.emacs.el --load /tmp/doc/publish.el --funcall org-publish-all
  - mkdir public && cp -r $PROGRESSION_DIR/progression/app/html/doc/* public/
  - "! grep -c nil public/api.html # Vérifie que la production de l'API n'a pas produit d'erreur"
  only:
    - dev
    - master
  artifacts:
    paths:
    - public

# Production de la documentation dev
pages_dev:
  stage: build_doc_dev
  variables:
    PROGRESSION_API_URL: https://progression.dti.crosemont.quebec/dev/api/v1
  script:
  - docker run -e PROGRESSION_API_URL=$PROGRESSION_API_URL -v "$PROGRESSION_DIR/:/tmp/" $CI_REGISTRY/progression/dev:latest emacs --batch --load ~/.emacs.el --load /tmp/doc/publish.el --funcall org-publish-all
  - mkdir -p public/dev && cp -r $PROGRESSION_DIR/progression/app/html/doc/* public/dev/
  - "! grep -c nil public/dev/api.html # Vérifie que la production de l'API n'a pas produit d'erreur"
  only:
    - dev
  artifacts:
    paths:
    - public


# Stage deploy_doc

# Déploiement de la doc
pages:
  stage: deploy_doc
  script:
    - echo OK #apparemment nécessaire...
  artifacts:
    paths:
    - public
  only:
    - dev
    - master
