#+SETUPFILE: http://plafrance.pages.dti.crosemont.quebec/org-html-themes/org/theme-readtheorg.setup
#+TITLE: Structure de contenu Progression

* Définitions :

** Catégorie : 
Une catégorie est une collection de de sous-catégories ou d'exercices liés à une compétence. La catégorie peut couvrir un cours ou une section d'un cours. L'étudiant qui complète une catégorie devrait être confiant d'avoir acquis une compétence ou une partie d'une compétence.
** Question :
La question est un exercice unique, validé par une série de tests.
** Test :
Chacune des validations effectuées pour prouver que l'étudiant a répondu correctement à la question.

* Structure des catégories :

La structure des catégories est données par l'arborescence de répertoires qui les contiennent. Une catégories contient un sous-répertoire par sous-catégorie et la sous-catégorie terminale contient un sous-répertoire par question. Pour décrire la catégorie, sous-catégorie ou la question, un fichier ~info.yml~ doit être présent dans la racine de chaque répertoire.

#+BEGIN_SRC text :exports both
catégorie/
|_info.yml
|_sous-catégorie_1/
| |_info.yml
| |_question1/
| | |_info.yml
| | |_question.py
| | |_tests/
| |   |_tous_les_cas.yml
| |
| |_question2/
|   |_info.yml
|   |_question.py
|   |_tests/
|     |_cas1.yml
|     |_cas2.yml
| 
|_sous-catégorie_2/
  |_info.yml
  |_question1/
  | |_info.yml
  | |_Question.java
  | |_tests/
  |   |_cas1.yml
  |   |_cas2.yml
  |
  |_question2/
  |_question3/
#+END_SRC

* Composition des fichiers

** Composantes d'une catégorie
- un fichier ~info.yml~ comportant les attributs suivants :
  - titre : le titre de la série
  - description : description courte de la série
  - questions : liste des répertoires contenant une question
- un sous-répertoire par question

** Composantes d'une question
- un fichier ~info.yml~ comportant les attributs suivants :
  - type : «prog|sys|bd», le type de question (programmation, administration système ou base de données).
  - titre : le titre de la question
  - description : description courte de la question
  - énoncé : énoncé de la question (en format Markdown)
  - execs : liste de descriptifs des programmes exécutables. Chaque élément contenant les attributs suivants :
    - langage : langage de programmation
    - fichier: le fichier contenant l'ébauche de programme
  - feedback+ : feedback positif général (facultatif, en format Markdown)
  - feedback- : feedback négatif général (facultatif, en format Markdown)
  - tests : liste des fichiers de tests
    
** Questions Prog: 
    
*** Le fichier d'ébauche de programme
Pour chaque question, un fichier de départ est fourni. Le programme entier doit résider dans ce seul fichier (pas d'import/include possible autre que ceux des librairies standard); c'est ce fichier qui sera exécuté.

En commentaire (quelque soit le style de commentaire du langage utilisé), les étiquettes suivantes peuvent être utilisées pour contrôler l'affichage et la modification du code par l'étudiant :
  - parties visibles (entre +VISIBLE et -VISIBLE) : ces sections seront visibles par l'étudiant
  - parties éditables (entre +TODO et -TODO) : ces sections seront modifiables par l'étudiant. Au moins une est obligatoire mais elle peut être vide.

Tout ce qui se trouve hors des sections VISIBLE sera invisible à l'étudiant (et donc immuable) mais sera tout de même exécuté normalement.

*** fichiers de tests
Les fichiers de tests sont dans le format yaml et comportent une ou plusieurs sections correspondant chacune à un test effectué. Les sections sont séparées par trois tirets (---) et elles contiennent les attributs suivants :
  - nom : nom du test
  - in : les entrées textuelles passés directement à l'entrée standard du programme
  - out : les sorties textuelles attendues sur la sortie standard du programme
  - feedback+ : feedback positif spécifique à la question (facultatif, en format Markdown)
  - feedback- : feedback négatif spécifique à la question (facultatif, en format Markdown)


* Exemple

#+NAME: createTree
#+BEGIN_SRC sh :results drawer :var toInclude="*.org" :var toExclude="" :var directory="./" :var createLink="true" :exports none
set -e
buffer=$(mktemp /tmp/buffer.XXXXXXXXX)
current_directory=$(pwd)
cd $(eval echo "$directory")
tree -a -P "$toInclude" -I "$toExclude" -if --noreport  --prune \
    | sed "s/.//"  | sed "s/^\///"  > "$buffer"

if [ $(grep --regexp="$" --count "$buffer") -eq 0 ]; then
    echo "**ERROR empty list**"
else
    for f in $(cat "$buffer")
    do 
    filename=$(basename $f)
    ext="${filename##*.}"
    baseFilename="${filename%.*}"
    if [ -f $f ]; then
        # removes org extension (only)
        if [ "$ext" = "org" ]; then
        filename="$baseFilename"
        fi
        # creates org link (or not)
        if [ "$createLink" = true ]; then 
        echo "$(echo "$f" | tr -cd / | tr / \\t)+ [[file:"$directory/$f"][$filename]]"
        else
        echo "$(echo "$f" | tr -cd / | tr / \\t)+ $filename"
        fi
    else
        echo  "$(echo "$f" | tr -cd / | tr / \\t)+ $filename/"
    fi
    done
fi
rm "$buffer"
cd "$current_directory"
#+END_SRC

#+CALL: createTree(toInclude="*",directory="./démo") :exports both

#+RESULTS:
:results:
+ boucles/
	+ boucle_énumérée/
		+ [[file:./démo/boucles/boucle_énumérée/exec.java][exec.java]]
		+ [[file:./démo/boucles/boucle_énumérée/exec.py][exec.py]]
		+ [[file:./démo/boucles/boucle_énumérée/info.yml][info.yml]]
		+ tests/
			+ [[file:./démo/boucles/boucle_énumérée/tests/tous_les_tests.yml][tous_les_tests.yml]]
	+ [[file:./démo/boucles/info.yml][info.yml]]
+ [[file:./démo/info.yml][info.yml]]
+ les_opérateurs/
	+ [[file:./démo/les_opérateurs/info.yml][info.yml]]
	+ question1/
		+ [[file:./démo/les_opérateurs/question1/arithmétique.py][arithmétique.py]]
		+ [[file:./démo/les_opérateurs/question1/info.yml][info.yml]]
		+ tests/
			+ [[file:./démo/les_opérateurs/question1/tests/cas_négatifs.yml][cas_négatifs.yml]]
			+ [[file:./démo/les_opérateurs/question1/tests/cas_positifs.yml][cas_positifs.yml]]
:end:
