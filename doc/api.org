#+SETUPFILE: https://plafrance.pages.dti.crosemont.quebec/org-html-themes/org/theme-readtheorg.setup

#+TITLE: API Progression
#+PROPERTY: header-args:bash :results output :exports both :noweb yes

* Points d'entrée

** Publics
| Méthode | URL               | Description                            | Paramètres                                   | Réponse             |
| POST    | ~/auth~           | Authentification                       | username, password ou key_name et key_secret | token, un token JWT |
| POST    | ~/inscription~    | Inscription                            | username, password, rôle                     | token, un token JWT |
| GET     | ~/config~         | Configuration du serveur               |                                              |                     |
| GET     | ~/doc~            | Documentation                          |                                              | str (HTML)          |

** Privés
Les points d’entrée privés requièrent un token dans l’entête : «Authentification: Bearer <token>»

| Méthode | URL                 | Description                            | Paramètres                                  | Réponse             |
| GET     | ~/user/{username}~  | Obtient l'utilisateur /username/       | username                                    | User                |
| GET     | ~/question/{uri}~   | Obtient la question disponible à <uri> | uri                                         | Question            |
| POST    | ~/token/{username}~ | Obtient un token pour {username}       | username, ressources demandées en json      | token, un token JWT |

* Ressources

Les ressources échangées sont représentées en format [[https://jsonapi.org][JSON-API]]

** Avancement

L'avancement d'un utilisateur pour une question.

*** Identifiant :
username/question_uri

*** Propriétés :

| Nom               | Type | Valeurs       | Description                                                            |
|-------------------+------+---------------+------------------------------------------------------------------------|
| état              | int  | 0=non débutée | Aucune tentative envoyée                                               |
|                   |      | 1=non réussie | Au moins une tentative, mais aucune n'est réussie                      |
|                   |      | 2=réussie     | Au moins une tentative dont une réussie                                |
| titre             | str  |               | Le titre de la question tel qu'il était lors de la dernière tentative  |
| niveau            | str  |               | Le niveau de la question tel qu'il était lors de la dernière tentative |
| date_modification | int  |               | La date de la dernière tentative                                       |
| date_réussie      | int  |               | La date de la première tentative réussie                               |
| extra             | str  |               | Infos extra à stoquer avec l'Avancement

*** Relations :

| Nom        | Cardinalité | Type       | Description                    |
|------------+-------------+------------+--------------------------------|
| tentatives | 1-n         | Tentatives | liste de Tentatives effectuées |

*** Liens :

| Nom       | Description                      |
|-----------+----------------------------------|
| tentative | Soumettre une nouvelle tentative |

** Clé

Une clé donnant accès à un sous-ensemble des services ou ressources de l’API. Les clés peuvent être octroyées temporairement ou être révoquées. Une clé peut être utilisée en lieu et place d’un mot de passe au moment d’effectuer une authentification. Le token JWT retourné après une authentification réussie peut être utilisé pour accéder aux services et ressources donnés par la portée de la clé.

*** Identifiant :
username/nom

*** Propriétés : 

| Nom         | Type   | Valeurs            | Description                                               |
|-------------+--------+--------------------+-----------------------------------------------------------|
| secret      | string |                    | valeur secrète de la clé                                  |
| création    | int    |                    | Timestamp de création                                     |
| expiration  | int    |                    | Timestamp d'expiration, 0=n'expire jamais                 |
| portée      | int    |                    | Service ou ressource accessible par la clé.               |
|             |        | 0=Révoquée         | La clé est révoquée pour tout service ou ressource        |
|             |        | 1=Authentification | La clé peut être utilisée pour authentifier l’utilisateur |
|-------------+--------+--------------------+-----------------------------------------------------------|

** Commentaire

Un message sur une tentative écrit par un utilisateur.

*** Identifiant :
username/question_uri/date_soumission/numéro

*** Propriétés:

| Nom             | Type | Valeurs   |
|-----------------+------+-----------|
| message         | str  |           |
| créateur        | str  |           |
| date            | int  |           |
| numéro_ligne    | int  |           |

** Ébauche

Une ébauche de solution fournie comme point de départ à la résolution de l'exercice.

*** Identifiant :
question_uri/langage

*** Propriétés:

| Nom     | Type | Valeurs |
|---------+------+---------|
| langage | str  |         |
| code    | str  |         |

** Question

Une question générique.

*** Identifiant :
URI

*** Hiérarchie

#+begin_src text
Question          
▲                 
├ QuestionProg    
├ QuestionSys     
└ QuestionBD
#+end_src


*** Propriétés :

| Nom         | Type | Valeurs      |
|-------------+------+--------------|
| uri         | str  |              |
| niveau      | str  |              |
| titre       | str  |              |
| description | str  |              |
| objectif    | str  |              |
| énoncé      | str  |              |
| auteur      | str  |              |
| licence     | str  |              |
| sous-type   | str  | questionProg |
|             |      | questionSys  |
|             |      | questionBD   |

** Question (sous-type QuestionProg)

Une question spécifiquement de programmation.

*** Relations :
| Nom        | Cardinalité | Type       | Description                   |
|------------+-------------+------------+-------------------------------|
| ebauches   | 1-n         | Ébauche    | liste d’ébauches de Solution  |
| tests      | 1-n         | Test       | liste de Tests de validation  |

** Question (sous-type QuestionSys)

Une question spécifiquement de type système

*** Relations :
| Nom           | Cardinalité | Type | Description                     |
|---------------+-------------+------+---------------------------------|
| image         | 1           | str  | image du conteneur              |
| utilisateur   | 1           | str  | utilisateur du conteneur        |
| solution      | 1           | str  | solution du test, s'il y a lieu |
| tests         | 1-n         | Test | liste de Tests de validation    |

** Résultat

Le résultat d'un test pour une solution proposée.

*** Identifiant :
username/question_uri/date_soumission/numéro

*** Propriétés:

| Nom             | Type | Valeurs                 |
|-----------------+------+-------------------------|
| sortie_observée | str  |                         |
| sortie_erreur   | str  |                         |
| résultat        | bool |                         |
| feedback        | str  |                         |
| temps_exécution | int  | temps d'exécution en ms |

** Sauvegarde automatique

La sauvegarde automatique du travail d'un utilisateur pour une question et dans un langage spécifique.

*** Identifiant :
username/question_uri/langage

*** Propriétés:

| Nom             | Type | Valeurs   |
|-----------------+------+-----------|
| date_sauvegarde | int  | timestamp |
| code            | str  |           |

** Tentative

Une tentative de réponse à une question.

*** Identifiant :
username/question_uri/date_soumission

*** Hiérarchie

#+begin_src text
Tentative 
▲ 
├ TentativeProg 
├ TentativeSys 
├ TentativeBD 
#+end_src

*** Propriétés :

| Nom             | Type | Valeurs                                                    |
|-----------------+------+------------------------------------------------------------|
| date_soumission | int  | timestamp                                                  |
| feedback        | str  |                                                            |
| réussi          | bool | vrai ssi la tentative a correctement répondu à la question |
| temps_exécution | int  | temps d'exécution en ms                                    |
| tests_réussis   | int  | nb de tests réussis                                        |
| sous-type       | str  | tentativeProg                                              |
|                 |      | tentativeSys                                               |
|                 |      | tentativeBD                                                |

*** Relations :

| Nom       | Cardinalité | Type     | Description           |
|-----------+-------------+----------+-----------------------|
| résultats | 1-n         | Résultat | les résultats de test |

** Tentative (sous-type tentativeProg)

Une tentative de réponse à une QuestionProg.

*** Propriétés:

| Nom             | Type | Valeurs                 |
|-----------------+------+-------------------------|
| langage         | str  |                         |
| code            | str  |                         |

** Tentative (sous-type tentativeSys)

Une tentative de réponse à une QuestionSys.

*** Propriétés:

| Nom             | Type | Valeurs                 |
|-----------------+------+-------------------------|
| conteneur       | str  |                         |
| réponse         | str  |                         |

** Tentative (sous-type tentativeSys)

Une tentative de réponse à une question.

*** Propriétés:

| Nom             | Type | Valeurs                 |
|-----------------+------+-------------------------|
| réponse         | str  |                         |
| tests_réussis   | int  | nb de tests réussis     |
| temps_exécution | int  | temps d'exécution en ms |

*** Relations :

| Nom       | Cardinalité | Type     | Description           |
|-----------+-------------+----------+-----------------------|
| résultats | 1-n         | Résultat | les résultats de test |

** Test

Un test de validation d’une question auquel sont soumises les solutions proposées.

*** Identifiant :
question_uri/numéro

*** Propriétés :

| Nom             | Type | Valeurs |
|-----------------+------+---------|
| nom             | str  |         |
| sortie_attendue | str  |         |
| feedback_pos    | str  |         |
| feedback_neg    | str  |         |


** TestProg (soustype de Test)

Un test de validation d'une QuestionProg auquel sont soumises les solutions proposées.

*** Propriétés :

| Nom          | Type | Valeurs |
|--------------+------+---------|
| entrée       | str  |         |
| params       | str  |         |
| feedback_err | str  |         |

** TestSys (soustype de Test)

Un test de validation d'une QuestionSys auquel sont soumises les solutions proposées.

*** Propriétés :

| Nom          | Type | Valeurs                  |
|--------------+------+--------------------------|
| validation   | str  |                          |
| utilisateur  | str  |l'utilisateur du conteneur|

** Token ressource

Un token JWT donnant accès à une ou plusieurs ressources. Une date d'expiration de 0 signifie que le token n'expire jamais.

Les ressources sont définies par leur URI et par la méthode de requête HTTP, avec une expression régulière. Un token ressource peut décrire une ou plusieurs ressources.

*** Propriétés :

| Nom             | Type |  Valeurs  |
|-----------------+------+-----------|
| username        | str  |           |
| current         | int  | timestamp |
| expired         | int  | timestamp |
| ressources      | str  |           |
| version         | int  |           |

** Utilisateur

Un utilisateur du système.

*** Identifiant :
username

*** Relations :

| Nom         | Type | Valeurs                                  |
|-------------+------+------------------------------------------|
| username    | str  |                                          |
| rôle        | int  | 0=normal,1=admin                         |
| préférences | str  | chaîne JSON décrivant les préférences UI |
|-------------+------+------------------------------------------|

*** Relations :

| Nom         | Cardinalité | Type       | description         |
|-------------+-------------+------------+---------------------|
| avancements | 1-n         | Avancement | Liste d'avancements |


* Exemples

#+NAME: get_api_url
#+begin_src sh :exports none
if [ -z "$PROGRESSION_API_URL" ]
then
	echo -n "https://progression.dti.crosemont.quebec/api/v1"
else
	echo -n $PROGRESSION_API_URL
fi
#+end_src

#+begin_warning
Les exemples reflètent les résultats réels sur la plus récente version de l’API disponible sur call_get_api_url().
#+end_warning

#+name: setup
#+BEGIN_SRC bash :eval yes :session *bash* :exports none :results none
curl() {
	/usr/bin/curl -s -w "\n" "$@" | base64
}

export -f curl

export TOKEN=$(/usr/bin/curl "<<get_api_url()>>/auth" --data '{"username": "jdoe", "password": "Crosemont2021!"}' -H "Content-Type: application/json" | grep -Po '(?<=Token":").*(?=")')

if [ -z "$TOKEN" ]
then
	export TOKEN=$(/usr/bin/curl "<<get_api_url()>>/inscription" --data '{"username": "jdoe", "password": "Crosemont2021!"}' -H "Content-Type: application/json" | grep -Po '(?<=Token":").*(?=")')
fi

#+END_SRC

#+NAME: json_pretty
#+begin_src python :eval yes :var json_str="{}" :results output :exports none
import json
import sys
import base64

def decode_b64( b64_str ):
    try:
        return base64.b64decode(b64_str)
    except:
        return b64_str

def decode_json( json_str ):    
    try:
        return json.loads(json_str)
    except:
        return json_str

def formatte_json( json_str ):
    try:
        return json.dumps( json_str, ensure_ascii=False, indent=4 )
    except:
        return json_str
    
print( formatte_json( decode_json( decode_b64( json_str ) ) ) )
#+end_src

#+RESULTS: json_pretty

** Obtenir la configuration du serveur

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/config"
#+END_SRC

** Authentification en tant qu’utilisateur ~jdoe~

#+NAME: AUTHENTIFICATION
#+BEGIN_SRC bash :eval yes
curl "<<get_api_url()>>/auth" --data '{"username": "jdoe", "password": "Crosemont2021!"}' -H "Content-Type: application/json"
#+END_SRC

#+RESULTS:

** Obtenir le profil de l’utilisateur authentifié ~jdoe~

#+NAME: USER
#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/user/jdoe" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Mettre à jour les préférences de ~jdoe~

#+begin_src bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
DATA='{"préférences": "{\"thème\": \"sombre\"}"}'

curl "<<get_api_url()>>/user/jdoe" --data $DATA -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+end_src

** Obtenir la question «Les fonctions avec paramètres/Rectangle» et ses tests: 

Cette question est disponible à l’URL suivant :
https://progression.pages.dti.crosemont.quebec/contenu/prog_1/9bdf5f1a-489a-441f-9e6e-2c87bba58bf8/info.yml

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/question/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw?include=tests" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir la question «Les fonctions avec paramètres/Rectangle», ses tests et ses ébauches: 

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/question/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw?include=tests,ebauches" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Créer l’avancement de jdoe à la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "question_uri":"aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw"
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" <<get_api_url()>>/user/jdoe/avancements -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir l’avancement de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir l’ébauche de solution en Python pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/ebauche/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/python" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Soumettre une tentative de solution à la question «Les fonctions avec paramètres/Rectangle» et récupérer les résultats

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
	"langage":"python",
	"code":"# Fonction qui calcule et produit en sortie le périmètre du rectangle dont les côtés sont reçus en paramètre. À faire\ndef périmètre( une_largeur, une_longueur ):\n    # -TODO\n    # -VISIBLE\n\n\n    # +VISIBLE\n    # +TODO\n    print(42)\n\n# -TODO\n# Fonction qui calcule et produit en sortie l'aire du rectangle dont les côtés sont reçus en paramètre. À faire\n# +TODO\n\n\n\n# -TODO\n# Programme principal\n# -VISIBLE\n\n# +VISIBLE\n# Entrées\nlargeur = int( input() )\nlongueur = int( input() )\n\n# Appel des fonctions, les côtés du rectangle sont transmis en paramètre. À faire\npérimètre( largeur, longueur )\n# +TODO\n\n\n# -TODO\n# -VISIBLE\n\n\n\n\n\n\n"
}
EOF
)
#+END_SRC

#+NAME: get_tentative
#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*) :cache yes
curl --data "$DATA" <<get_api_url()>>/avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/tentatives?include=resultats -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

#+begin_src bash :eval yes :session *bash* :results none :exports none
sleep 1 #Petit moment d'attente pour s'assurer que la prochaine tentative n'aura pas le même timestamp
#+end_src

** Obtenir une tentative de solution préalablement soumise pour la question «Les fonctions avec paramètres/Rectangle»

#+NAME: get_timestamp
#+BEGIN_SRC bash :eval yes :session *bash* :var RES_TENTATIVE=get_tentative :results output :exports none
TIMESTAMP=$(echo $RES_TENTATIVE | grep -Po '(?<="date_soumission": )\d*')
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/tentative/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/$TIMESTAMP" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir le test numéro 0 pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/test/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/0" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir un token ressource qui donne accès à un avancement de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
 [
      {
  	    "uri":"^avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw$",
  	    "method":"^GET$"
      }
 ]
}
EOF
)
#+END_SRC


#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" "<<get_api_url()>>/token/jdoe" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Créer ou mettre à jour la sauvegarde de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle» et un code ~python~

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "langage":"python",
  "code": "#+TODO\nSystem.out.println('Allo le monde');\n#-TODO"
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" <<get_api_url()>>/avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/sauvegardes -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir la dernière sauvegarde de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle» effectuée avec le langage ~python~: 

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/sauvegarde/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/python" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Créer une clé d’authentification pour ~jdoe~

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "nom":"cléAuth$(head -c 9 /dev/urandom|base64|tr '/+' '_-')",
  "portée":1
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" "<<get_api_url()>>/user/jdoe/cles" -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Authentification par clé d’authentification pour ~jdoe~

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports none
DATA=$(cat <<EOF
{
  "nom":"cléAuth$(head -c 9 /dev/urandom|base64|tr '/+' '_-')",
  "portée":1,
  "expiration": $(( $(date +%s) + 60 ))
}
EOF
)

RES_CLE=$(/usr/bin/curl --data "$DATA" "<<get_api_url()>>/user/jdoe/cles" -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN")

NOM_CLE=$(echo $RES_CLE | grep -Po '(?<="id":"jdoe\\/)[^"]*')
SECRET=$(echo $RES_CLE | grep -Po '(?<="secret":")\w*')
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "username":"jdoe",
  "key_name":"$NOM_CLE",
  "key_secret":"$SECRET"
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" "<<get_api_url()>>/auth" -H "Content-Type: application/json"
#+END_SRC
