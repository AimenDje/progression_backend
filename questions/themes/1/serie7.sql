INSERT INTO serie (themeID, serieID, numero, titre, description)
VALUES (1, 7, 7, "La validation des fonctions II", "Ces questions vous permettront de vérifier vos connaissances sur les fonctions et leur validation par les doctests. Pensez à utiliser les fonction existantes.");

    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 1, 7,'Question 1', 'Question 1', 'Les doctests de cette fonction doivent <em>passer</em>');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '$r=rand(0,9999);  ', '', '"def numéro_magique(): \n    \\"\\"\\" \n    Retourne un numéro magique entre 0 et 9999. \n\n    Exemples :\n    >>> numéro_magique() \n    \$r\n\n    \\"\\"\\" \n    numéro_magique=\$r"', '    return 0', '"#Exécute les tests\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()"');  
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 2, 7,'Question 2', 'Question 2', 'Les doctests de cette fonction doivent <em>passer</em>. Évitez le copier-coller!');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '$r=rand(1000,9999);  ', '', '"def trier_liste( une_liste ):\n    \\"\\"\\"\n    Tri une liste d\'éléments comparables.\n\n    Paramètres : \n    une_liste : une liste à trier d\'éléments comparables entre eux (du même type ou de types comparables)\n\n    Retour : une liste contenant les mêmes éléments que <em>une_liste</em> en ordre croissant.\n\n    Exemples :\n    >>> trier_liste([ 42, 2, 0, 21 ])\n    [0, 2, 21, 42]\n    >>> trier_liste([7])\n    [7]\n    >>> trier_liste([])\n    []\n    \\"\\"\\"\n    items = list(une_liste)\n    for i in range(len(items)):\n        for j in range(len(items)-1-i):\n            if items[j] > items[j+1]:\n                items[j], items[j+1] = items[j+1], items[j]     \n    return items\n    \ndef trier_liste_décroissant( une_liste ):\n    \\"\\"\\"\n    Tri une liste d\'éléments comparables en ordre décroissant.\n\n    Paramètres : \n    une_liste : une liste à trier d\'éléments comparables entre eux (du même type ou de types comparables)\n\n    Retour : une liste contenant les mêmes éléments que <em>une_liste</em> en ordre décroissant.\n    \n    Exemples :\n    >>> trier_liste_décroissant([ 42, 2, 0, 21 ])\n    [42, 21, 2, 0]\n    >>> trier_liste_décroissant([7])\n    [7]\n    >>> trier_liste_décroissant([])\n    []\n    \\"\\"\\""', '    pass', '"#Exécute les tests\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()"');  
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 3, 7,'Question 3', 'Question 3', 'Les doctests de cette fonction doivent <em>passer</em>');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '$r=rand(1000,9999);  ', '', '"from math import sqrt\nfrom random import randrange \n\ndef est_premier(nombre): \n    \\"\\"\\" \n    Détermine si un nombre est premier.\n\n    Paramètres : \n    nombre : un nombre entier potentiellement premier.\n\n    Retour : Vrai si et seulement si <em>nombre</em> est premier.\n\n    Exemples :\n    >>> est_premier(7918) \n    False\n    >>> est_premier(7919)\n    True\n    >>> est_premier(0)\n    False\n\n    \\"\\"\\" \n    if nombre<2 : return False\n    for i in range(2, int(sqrt(nombre))+1): \n        if nombre%i==0 : return False\n    return True\n\ndef trouver_nb_premier(min, max):\n    \\"\\"\\"\n    Fournit un nombre premier entre les limites [min, max[.\n\n    Paramètres:\n    min : un nombre entier limite inférieure inclusive de l\'intevalle des nombres premiers possibles  \n    max : un nombre entier limite supérieure exclusive de l\'intevalle des nombres premiers possibles  \n\n    Retour : un nombre premier sélectionné au hasard n tel que min <= n < max. Retourne None si max<=min. \n\n    >>> trouver_nb_premier(8, 13)\n    11\n    >>> trouver_nb_premier(5, 1) is None\n    True\n    >>> trouver_nb_premier(5, 5) is None\n    True\n    >>> est_premier(trouver_nb_premier(1000000, 2000000))\n    True\n    >>> n = trouver_nb_premier(1000000, 2000000)\n    >>> n >= 1000000 and n < 2000000\n    True\n    >>> trouver_nb_premier(1000000, 2000000) != trouver_nb_premier( 1000000, 2000000 )\n    True\n\n    \\"\\"\\""', '    return 0', '"#Exécute les tests\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()"');  