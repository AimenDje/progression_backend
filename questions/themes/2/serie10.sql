INSERT INTO serie (themeID, serieID, numero, titre, description)
VALUES (2, 10, 3, "Le coffre-fort", "Ce quiz vous permettra, en quatre étapes, de réaliser une classe représentant un coffre-fort.");

    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 1, 10,'Question 1', 'Question 1', 'Faites afficher la combinaison du CoffreFort mon_coffre sous forme de liste.');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"[\$r, \$s, \$t, \$u]"', '$r=rand(0,99); $s=rand(0,99); $t=rand(0,99); $u=rand(0,99);  ', '"\nimport random\nnum_aléatoire=0\ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter"', '"\nimport random\n\nclass CoffreFort:\n    \\"\\"\\"\n    Un coffre-fort très peu sécuritaire.\n\n    Attributs : combinaison, une liste de 4 chiffres entre 0 et 99.\n\n    \\"\\"\\"\n    def __init__(self, une_combinaison):\n        \\"\\"\\"\n        Initialise le Coffre-fort avec une combinaison choisie.\n\n        Paramètre :\n            - une_combinaison, une liste de 4 entiers entre 0 et 99.\n\n        \\"\\"\\"\n        self.combinaison = une_combinaison\n\n\nmon_coffre = CoffreFort( [ \$r, \$s, \$t, \$u ] )"', '#Votre code ici:
print(42)', '');
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 2, 10,'Question 2', 'Question 2', 'L\'attribut combinaison est maintenant privé. Procurez-lui un accesseur <code>get_combinaison</code>.');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"[\$r, \$s, \$t, \$u]"', '$r=rand(0,99); $s=rand(0,99); $t=rand(0,99); $u=rand(0,99);  ', '"\nimport random\nnum_aléatoire=0\ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter"', '"\nimport random\n\nclass CoffreFort:\n    \\"\\"\\"\n    Un coffre-fort très peu sécuritaire.\n\n    \\"\\"\\"\n    def __init__(self, une_combinaison):\n        \\"\\"\\"\n        Initialise le Coffre-fort avec une combinaison choisie.\n\n        Paramètre :\n            - une_combinaison, une liste de 4 entiers entre 0 et 99.\n\n        \\"\\"\\"\n        self.__combinaison = une_combinaison"', '    #Votre code ici:\n\n', '"\nmon_coffre = CoffreFort( [ \$r, \$s, \$t, \$u ] )\nprint(mon_coffre.get_combinaison())\n\n"');
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 3, 10,'Question 3', 'Question 3', 'Ajoutez maitenant un mutateur <code>set_combinaison</code> qui prend en paramètre une liste d\'exactement 4 entiers entre 0 et 99 inclusivement. Assurez-vous que toutes ces conditions seront toujours respectées.');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '$r=rand(0,99); $s=rand(0,99); $t=rand(0,99); $u=rand(0,99);  ', '"\nimport random\nnum_aléatoire=0\ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter"', '"\nimport random\n\nclass CoffreFort:\n    \\"\\"\\"\n    Un coffre-fort très peu sécuritaire.\n\n    \\"\\"\\"\n    def __init__(self, une_combinaison):\n        \\"\\"\\"\n        Initialise le Coffre-fort avec une combinaison choisie.\n\n        Paramètre :\n            - une_combinaison, une liste de 4 entiers entre 0 et 99.\n\n        Exemples :\n        >>> #Test des cas invalides\n        >>> coffre_test = CoffreFort( [ 0, 1, 2 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test = CoffreFort( [ 0, 1, 2, 100 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test = CoffreFort( [ -1, 1, 2, 3 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n\n        \\"\\"\\"\n        self.set_combinaison( une_combinaison )\n\n    def get_combinaison(self):\n        \\"\\"\\"\n        Accesseur de la combinaison.\n\n        Retour : une liste de 4 entiers entre 0 et 99 inclusivement.\n\n        Exemples :\n        >>> coffre_test = CoffreFort( [ 0, 1, 2, 3 ] )\n        >>> coffre_test.get_combinaison()\n        [0, 1, 2, 3]\n        \\"\\"\\"\n        return self.__combinaison\n\n    def set_combinaison(self, une_combinaison):\n        \\"\\"\\"\n        Mutateur de la combinaison\n\n        Paramètre :\n            - une_combinaison, une liste de 4 entiers entre 0 et 99.\n\n        Exemples:\n        >>> #Test un cas invalide\n        >>> coffre_test = CoffreFort( [ 0, 1, 2, 3 ] )\n        >>> coffre_test.set_combinaison( [ 7, 11, 13, 17 ])\n        >>> coffre_test.get_combinaison()\n        [7, 11, 13, 17]\n        >>> #Test des cas invalides\n        >>> coffre_test.set_combinaison( [ 0, 1, 2 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test.set_combinaison( [ 0, 1, 2, 100 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test.set_combinaison( [ 0, -1, 2, 3] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n\n        \\"\\"\\""', '        #Votre code ici:\n\n', '"\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()\n"');
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 4, 10,'Question 4', 'Question 4', 'Ajoutons une porte à notre coffre-fort et deux méthodes, <code>ouvrir</code> et <code>fermer</code>. <code>ouvrir</code> prend une combinaison en paramètre et n\'ouvre la porte que si celle-ci correspond à la combinaison du coffre. <code>fermer</code>, quant à elle, ferme la porte de façon inconditionnelle. Une troisième méthode, <code>est_ouvert</code> retourne Vrai si et seulement si la porte est ouverte. Vous aurez besoin d\'un attribut supplémentaire : <code>__état_porte</code>\n<br><br>\n<img src=\'uml.jpg\'>');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"Le coffre-fort est ouvert\nLe coffre-fort est inviolable!\nLe coffre-fort est inviolable!\nLe coffre-fort est ouvert\nLe coffre-fort est ouvert"', '$r=rand(0,99); $s=rand(0,99); $t=rand(0,99); $u=rand(0,99);  ', '"\nimport random\nnum_aléatoire=0\ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u, \$v ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter\n"', '"\nimport random\n\nclass CoffreFort:\n    \\"\\"\\"\n    Un coffre-fort très peu sécuritaire.\n\n    \\"\\"\\"\n    def __init__(self, une_combinaison):\n        \\"\\"\\"\n        Initialise le Coffre-fort avec une combinaison choisie.\n\n        Paramètre :\n            - une_combinaison, une liste de 4 entiers entre 0 et 99.\n\n        Exemples :\n        >>> #Test des cas invalides\n        >>> coffre_test = CoffreFort( [ 0, 1, 2 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test = CoffreFort( [ 0, 1, 2, 100 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test = CoffreFort( [ -1, 1, 2, 3 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n\n        \\"\\"\\"\n        self.__état_porte = True\n        self.set_combinaison( une_combinaison )\n\n    def get_combinaison(self):\n        \\"\\"\\"\n        Accesseur de la combinaison.\n\n        Retour : une liste de 4 entiers entre 0 et 99 inclusivement.\n\n        Exemples :\n        >>> coffre_test = CoffreFort( [ 0, 1, 2, 3 ] )\n        >>> coffre_test.get_combinaison()\n        [0, 1, 2, 3]\n        \\"\\"\\"\n        return self.__combinaison\n\n    def set_combinaison(self, une_combinaison):\n        \\"\\"\\"\n        Mutateur de la combinaison\n\n        Paramètre :\n            - une_combinaison, une liste de 4 entiers entre 0 et 99.\n\n        Exemples:\n        >>> #Test un cas invalide\n        >>> coffre_test = CoffreFort( [ 0, 1, 2, 3 ] )\n        >>> coffre_test.set_combinaison( [ 7, 11, 13, 17 ])\n        >>> coffre_test.get_combinaison()\n        [7, 11, 13, 17]\n        >>> #Test des cas invalides\n        >>> coffre_test.set_combinaison( [ 0, 1, 2 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test.set_combinaison( [ 0, 1, 2, 100 ] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n        >>> coffre_test.set_combinaison( [ 0, -1, 2, 3] )\n        Traceback (most recent call last):\n        AssertionError: Paramètre combinaison invalide.\n\n        \\"\\"\\"\n        #Vérifie le nombre de chiffres dans la combinaison\n        assert len(une_combinaison) == 4, \\"Paramètre combinaison invalide.\\"\n        #Vérifie que chaque chiffre est entre 0 et 99 inclusivement.\n        for i in range(4):\n            assert une_combinaison[i] in range(100), \\"Paramètre combinaison invalide.\\"\n\n        self.__combinaison = une_combinaison"', '    #Votre code ici:\n\n', '"\ndef vérifier_porte():\n    if mon_coffre.est_ouvert():\n        print(\\"Le coffre-fort est ouvert\\")\n    else:\n        print(\\"Le coffre-fort est inviolable!\\")\n\n\n#Programme principal\nmon_coffre = CoffreFort( [ \$r, \$s, \$t, \$u ] )\nvérifier_porte()\nmon_coffre.fermer()\nvérifier_porte()\nmon_coffre.ouvrir( [0, 1, 2, 3] )\nvérifier_porte()\nmon_coffre.ouvrir( [ \$r, \$s, \$t, \$u ] )\nvérifier_porte()\nmon_coffre.ouvrir( [0, 1, 2, 3] )\nvérifier_porte()\n\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()\n"');