INSERT INTO serie (themeID, serieID, numero, titre, description)
VALUES (1, 6, 6, "La validation des fonctions I", "Ces questions vous permettront de vérifier vos connaissances sur les fonctions et leur validation par les doctests.");

    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 1, 6,'Question 1', 'Question 1', 'Les doctests de cette fonction doivent <em>passer</em>');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '', '', '"def allo_le_monde():\n    \\"\\"\\"\n    Affiche un mot de bienvenue au monde «Allo le monde!»\n\n    Exemples :\n    >>> allo_le_monde()\n    Allo le monde!\n\n    \\"\\"\\"\n"', '    pass', '"#Exécute les tests\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()"');  
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 2, 6,'Question 2', 'Question 2', 'Les doctests de cette fonction doivent <em>passer</em>');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '', '', '"def additionner(nombre1, nombre2):\n    \\"\\"\\"\n    Additionne deux nombres.\n\n    Paramètres :\n    nombre1 : nombre réel à additionner\n    nombre2 : nombre réel à additionner\n\n    Retour : La somme de nombre1 et nombre2.\n\n    Exemples :\n    >>> additionner(2, 3) \n    5\n    >>> additionner(-2.1, 1)\n    -1.1\n    >>> additionner(-1, -3.0)\n    -4.0\n\n    \\"\\"\\""', '    pass', '"#Exécute les tests\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()"');  
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 3, 6,'Question 3', 'Question 3', 'Les doctests de cette fonction doivent <em>passer</em>. Souvenez-vous que <img class=\\"mwe-math-fallback-image-inline tex\\" alt=\\"\sqrt[n]{x} \,=\, x^{1/n}\\" src=\\"http://upload.wikimedia.org/math/f/6/e/f6e2875466bdf9e5eb4a7db071b8e812.png\\" />');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '', '', '"def racine_nième( opérande, racine ):\n    \\"\\"\\"\n    Calcule la racine nième d\'un nombre.\n\n    Paramètres :\n    opérande : le nombre réel duquel il faut extraire la racine nième.\n    racine : un nombre réel, la racine à extraire (ex. 2 pour la \n             racine carrée, 3 pour la racine cubique, etc.)\n\n    Retour : un nombre réel, la racine nième de l\'opérande.\n\n    >>> racine_nième( 81, 2 )\n    9.0\n    >>> (racine_nième( 1000, 3)-10)<0.00001\n    True\n    >>> racine_nième( 1024, 10)\n    2.0\n\n    \\"\\"\\"\n"', '    pass', '"#Exécute les tests\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()"');  
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 4, 6,'Question 4', 'Question 4', 'Les doctests de cette fonction doivent <em>passer</em>. ');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), 'null', '', '', '"def chaméliser( phrase ): \n    \\"\\"\\"\n    Donne la version en «casse de chameau» (<em>camel case</em>) d\'une phrase.\n\n    Retourne une copie de la phrase originale dont chaque espace a été\n    supprimée et dont chaque mot commence par une majuscule sauf le\n    premier.\n\n    Paramètres :\n    phrase : une chaîne de caractères à «chaméliser».\n\n    Retour : une copie de la phrase originale «chamélisée».\n\n    >>> chaméliser(\\"\\")\n    \'\'\n    >>> print(chaméliser(\\"salut\\"))\n    salut\n    >>> print(chaméliser(\\"salut tout le monde\\"))\n    salutToutLeMonde\n    >>> print(chaméliser(\\"Salut Tout le Monde\\"))\n    salutToutLeMonde\n    >>> print(chaméliser(\\"Salut Tout le Monde \\"))\n    salutToutLeMonde\n\n    \\"\\"\\""', '    pass', '"#Exécute les tests\nif __name__ == \\"__main__\\":\n    import doctest\n    doctest.testmod()"');  
