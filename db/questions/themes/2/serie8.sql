INSERT INTO serie (themeID, serieID, numero, titre, description)
VALUES (2, 8, 1, "Les attributs et les méthodes", "Ces questions vous permettront de vérifier vos connaissances sur les classes, leurs attributs et leurs méthodes.");

    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 1, 8,'Question 1', 'Question 1', 'Instanciez un Mogwai et faites-le se présenter grâce à la methode <code>présenter</code>.');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"Bonjour, je suis le Mogwai no \$r\n"', '$r=rand(0,999);  ', '"import random; random.randrange = lambda x: \$r\n"', '"import random\n\nclass Mogwai:\n    \\"\\"\\"\n    Un Mogwai, être attachant et sans malice.\n\n    Attributs : numéro, un entier entre 0 et 999 identifiant chaque mogwai.\n\n    \\"\\"\\"\n    def présenter(self):\n        \\"\\"\\"\n        Presente un Mogwai\n    \n        \\"\\"\\"\n        print(\\"Bonjour, je suis le Mogwai no \\" + str(self.numéro))\n\n    def __init__(self):\n        \\"\\"\\"\n        Initialise le Mogwai.\n\n        \\"\\"\\"\n        self.numéro = random.randrange(1000)\n        \n"', '', ''); 
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 2, 8,'Question 2', 'Question 2', 'Instanciez deux Mogwais et faites-les se présenter grâce à la methode <code>présenter</code>');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"Bonjour, je suis le Mogwai no \$r\nBonjour, je suis le Mogwai no \$s\n"', '$r=rand(0,999); $s=rand(0,999); $t=rand(0,999); $u=rand(0,999); $v=rand(0,999);  ', '"import random\nnum_aléatoire=0; \ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u, \$v ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter\n"', '"class Mogwai:\n    \\"\\"\\"\n    Un Mogwai, être attachant et sans malice.\n\n    Attributs : numéro, un entier entre 0 et 999 identifiant chaque mogwai.\n\n    \\"\\"\\"\n    def présenter(self):\n        \\"\\"\\"\n        Presente un Mogwai\n    \n        \\"\\"\\"\n        print(\\"Bonjour, je suis le Mogwai no \\" + str(self.numéro))\n\n    def __init__(self):\n        \\"\\"\\"\n        Initialise le Mogwai.\n\n        \\"\\"\\"\n        self.numéro = random.randrange(1000)\n        \n"', '', ''); 
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 3, 8,'Question 3', 'Question 3', 'Instanciez 5 Mogwais, placez-les dans une liste puis faites-les se présenter en <em>ordre inverse</em> de leur creation');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"Bonjour, je suis le Mogwai no \$v\nBonjour, je suis le Mogwai no \$u\nBonjour, je suis le Mogwai no \$t\nBonjour, je suis le Mogwai no \$s\nBonjour, je suis le Mogwai no \$r\n"', '$r=rand(0,999); $s=rand(0,999); $t=rand(0,999); $u=rand(0,999); $v=rand(0,999);  ', '"import random\nnum_aléatoire=0; \ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u, \$v ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter\n"', '"class Mogwai:\n    \\"\\"\\"\n    Un Mogwai, être attachant et sans malice.\n\n    Attributs : numéro, un entier entre 0 et 999 identifiant chaque mogwai.\n\n    \\"\\"\\"\n    def présenter(self):\n        \\"\\"\\"\n        Presente un Mogwai\n    \n        \\"\\"\\"\n        print(\\"Bonjour, je suis le Mogwai no \\" + str(self.numéro))\n\n    def __init__(self):\n        \\"\\"\\"\n        Initialise le Mogwai.\n\n        \\"\\"\\"\n        self.numéro = random.randrange(1000)\n\n"', '', ''); 
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 4, 8,'Question 4', 'Question 4', 'Lorsque les Mogwais sont mouillés, ils se divisent et créent un nouveau clone d\'eux-même. La seule différence est que le nouveau Mogwai porte un numéro incrémenté de 1 par rapport à son parent. Implémentez la méthode <code>mouiller</code> qui permet de créer le nouvel objet. ');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"Bonjour, je suis le Mogwai no \$r\nBonjour, je suis le Mogwai no \$rp\n"', '$r=rand(0,999); $rp=$r+1; $s=rand(0,999); $t=rand(0,999); $u=rand(0,999); $v=rand(0,999);  ', '"\nimport random\nnum_aléatoire=0; \ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u, \$v ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter\n"', '"\n\nimport random\n\nclass Mogwai:\n    \\"\\"\\"\n    Un Mogwai, être attachant et sans malice.\n\n    Attributs : numéro, un entier entre 0 et 999 identifiant chaque mogwai.\n\n    \\"\\"\\"\n    def présenter(self):\n        \\"\\"\\"\n        Presente un Mogwai\n    \n        \\"\\"\\"\n        print(\\"Bonjour, je suis le Mogwai no \\" + str(self.numéro))\n\n    def __init__(self):\n        \\"\\"\\"\n        Initialise le Mogwai.\n\n        \\"\\"\\"\n        self.numéro = random.randrange(1000)\n\n    def mouiller(self):\n        \\"\\"\\"\n        Retourne un nouveau Mogwai clone du premier.\n\n        Instancie un nouveau Mogwai avec un numéro incrémenté de 1 par rapport à son parent.\n\n        Retour : Un nouvel objet Mogwai.\n\n        \\"\\"\\"\n"', '        return None', '"\n\nguizmo = Mogwai()\nclone = guizmo.mouiller()\n\nguizmo.présenter()\nclone.présenter()\n\n"');
    
INSERT INTO question (type, numero, serieID, titre, description, enonce) VALUES (0, 5, 8,'Question 5', 'Question 5', 'Lorsqu\'on donne à manger à un Mogwai, il se transforme en bête féroce appelée un Gremlin. Implémentez la méthode manger qui retourne un nouvel objet Gremlin portant le même numéro que le Mogwai si l\'heure passée est entre minuit et 7h. Implémentez aussi la classe Gremlin qui se présente en affichant «Grrr! je suis le Gremlin no xxx» où xxx est son numéro de Gremlin.');
INSERT INTO question_prog (questionID, reponse, setup, pre_exec, pre_code, in_code, post_code) VALUES ((SELECT max(questionID) FROM question), '"None\nGrrr! je suis le Gremlin no \$r\n"', '$r=rand(0,999); $s=rand(0,999); $t=rand(0,999); $u=rand(0,999); $v=rand(0,999);  ', '"import random\nnum_aléatoire=0; \ndef numéroter(n):\n    global num_aléatoire \n    numéros = [ \$r, \$s, \$t, \$u, \$v ]\n    resultat = numéros[num_aléatoire]\n    num_aléatoire+=1\n    return resultat\n\nrandom.randrange = numéroter\n"', '"import random\n\nclass Mogwai:\n    \\"\\"\\"\n    Un Mogwai, être attachant et sans malice.\n\n    Attributs : numéro, un entier entre 0 et 999 identifiant chaque mogwai.\n\n    \\"\\"\\"\n    def présenter(self):\n        \\"\\"\\"\n        Presente un Mogwai\n    \n        \\"\\"\\"\n        print(\\"Bonjour, je suis le Mogwai no \\" + str(self.numéro))\n\n    def __init__(self):\n        \\"\\"\\"\n        Initialise le Mogwai.\n\n        \\"\\"\\"\n        self.numéro = random.randrange(1000)\n\n    def manger(self, heure, minutes):\n        \\"\\"\\"\n        Fait manger le Mogwai à une certaine heure.\n\n        Paramètres : heure, un entier représentant l\'heure à laquelle le Mogwai doit manger.\n                     minutes, un entier représentant les minutes de l\'heure à laquelle le Mogwai doit manger.\n\n        Retour : Un nouvel objet Gremlin si le Mogwai mange entre 00:00 et 07:00 ou None sinon. \n\n        \\"\\"\\"\n        if heure>0 and heure<7:\n            clone = Gremlin()\n            clone.numéro = self.numéro\n            return clone\n        else :\n            return None\n\nclass Gremlin:\n    \\"\\"\\"\n    Un Gremlin, monstre affamé mais divertissant.\n   \n    Attributs :\n    numéro : un entier identifiant le Gremlin.\n\n    \\"\\"\\"\n    #À compléter\n \n"', '', '"\n\n#Crée un nouveau Mogwai\nguizmo = Mogwai()\n\n#Donne à manger au Mogwai à 9h15 (pas de problème).\ngremo = guizmo.manger( 9, 15 )\nprint(gremo)\n\n#Donne à manger au Mogwai à 4h15 (ho ho...).\ngremo = guizmo.manger( 4, 15 )\n\n#Si gremo est un objet Gremlin, on le fait se présenter.\nif isinstance(gremo, Gremlin):\n    gremo.présenter()\n\n"');
